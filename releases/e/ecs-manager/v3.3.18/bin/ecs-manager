#!/usr/bin/env bash
######################################################## BISU Importer Start #########################################################
## Official Web Site: https://bisu.cc
## Version: 20250718Z1
## Recommended BISU PATH: /usr/local/sbin/bisu
## Set the required version of BISU
export THIS_REQUIRED_BISU_VERSION=">=9.0.0"
export BISU_PATH="/usr/local/sbin/bisu"
export BISU_DL_COMMAND="curl -sL https://g.bisu.cc/bisu -o $TMP/bisu && chmod +x $TMP/bisu && $TMP/bisu -f install"

## <user-customized-variables>
# Set this utility's name
export UTILITY_NAME="ecs-manager"
# Set this utility's version number
export UTILITY_VERSION="3.3.18"
# Set this utility's doc URI
export UTILITY_INFO_URI="https://bisu.cc/p/ecs-manager"
# Set this utility's last release date
export LAST_RELEASE_DATE="2025-07-18Z"
# Atomic mutex lock switch for single-threaded utilities
export ATOMIC_MUTEX_LOCK="true"
# Debug Switch
export DEBUG_MODE="false"
## </user-customized-variables>

## <required-external-commands>
export REQUIRED_EXTERNAL_COMMANDS=('vi' 'ssh' 'nc')
## </required-external-commands>

## <required-scripts>
export REQUIRED_SCRIPTS=()
## </required-scripts>

## <actions-read-only>
export ACTIONS_RO=('ls')
## </actions-read-only>

## <auto-run-commands>
export AUTORUN=()
## </auto-run-commands>

## <exit-with-commands>
export EXIT_WITH_COMMANDS=()
## </exit-with-commands>

## Import BISU file
source "$BISU_PATH" 2>/dev/null || {
    command -v "bash" &>/dev/null || {
        printf '%s\n' "BISU is bash dedicated, using it in another shell is risky."
        exit 1
    }
    [ -f "$BISU_PATH" ] && [[ $(bash -c "${BISU_PATH} installed") == "true" ]] || {
        printf '%s\n%s\n' "Error: BISU is not correctly installed, please use the command below to fix it." "$BISU_DL_COMMAND"
        exit 1
    }
    printf '%s\n' "Error: Unable to load BISU."
    exit 1
}
######################################################## BISU Importer End ###########################################################

# An agile tool to easily manage over 1,000 ECS instances
# As an extra method for manually operating hosts if needed
# Or personal hosts easy handling

# Set the ecs hosts configs directory path
export HOSTS_INFO_DIR="$HOME/.local/ecs-manager/ecs-instances"
# ssh known hosts file path
export KNOWN_HOSTS_FILE="$HOME/.ssh/known_hosts"
# The below to set the default values for the environment
export HOST_NAME=""
export USE_PROXY=false
export USE_MOSH=false
export USERNAME="root"
export HOST_ADDR=""
export HOST_PORT="22"
export PROXY_ADDR="127.0.0.1"
export PROXY_PORT="8080"
export MOSH_PORTS="60000:61000"
# If true, the script will prefer the PEM file for SSH connection
# If you prefer to use a password, you can set it as false
export PREFER_PEM=true
# When PREFER_PEM is true, the PEM_FILE variable should be set as required
export PEM_FILE=""
# Specify which folders to search for PEM files
export PEM_FILE_DIRS=("$HOME/.ssh")
# Cache for hostname modification
export HOSTNAME_BACKUP_FILE="/etc/hostname.backup.default"

@class EcsManager
@def
__construct() {
    # Parameters (these can come from the environment or command-line arguments)
    in_array "${USE_PROXY}" "true" "false" || USE_PROXY="false"
    in_array "${USE_MOSH}" "true" "false" || USE_MOSH="false"
    USERNAME="${USERNAME:-"user"}"
    HOST_ADDR="${HOST_ADDR:-}"
    HOST_PORT="${HOST_PORT:-22}"
    MOSH_PORTS="${MOSH_PORTS:-60000:61000}"
    PROXY_ADDR="${PROXY_ADDR:-}"
    PROXY_PORT="${PROXY_PORT:-8080}"
    in_array "${PREFER_PEM}" "true" "false" || PREFER_PEM="true"
    PEM_FILE="${PEM_FILE:-}"
    normalize_array "PEM_FILE_DIRS"
}

# Universal function to generate proxy command
@def
generate_proxy_param() {
    local use_proxy=$(trim "$USE_PROXY")
    local proxy_ip_addr=$(trim "$PROXY_ADDR")
    local proxy_port=$(trim "$PROXY_PORT")

    if [[ "$use_proxy" == "true" ]] && is_valid_ip "$proxy_ip_addr" && is_valid_port "$proxy_port"; then
        printf '%s' "-o ProxyCommand='nc -x $proxy_ip_addr:$proxy_port %h %p'"
    else
        printf ""
    fi
}

# Set extra PEM file directories
@def
set_pem_file_dir() {
    local pem_file_dir=$(trim "$1")
    if ! is_dir "$pem_file_dir"; then
        error_exit "PEM file directory [$pem_file_dir] does not exist."
    fi
    array_unique_push "PEM_FILE_DIRS" "$pem_file_dir"
}

# Get host configuration from the configuration file
@def
exact_host_config() {
    local host_name=$(trim "$1")
    local host_config_file="$HOSTS_INFO_DIR/$host_name.yml"

    if ! is_file "$host_config_file"; then
        error_exit "The host [$host_name] config file was not found."
    fi

    yaml_to_array "$(cat "$host_config_file")"
    log_msg "Using $host_config_file"
}

# Get host information from the configuration file
@def
set_host_info() {
    local host_name=$(trim "$1")
    if [ -z "$host_name" ]; then
        error_exit "Host name is required."
    fi

    $this.exact_host_config "$host_name"
    HOST_NAME="$host_name"

    local use_proxy=$(dict_get_val "USE_PROXY") && USE_PROXY="$use_proxy"
    local use_mosh=$(dict_get_val "USE_MOSH") && USE_MOSH="$use_mosh"
    local username=$(dict_get_val "USERNAME") && USERNAME="$username"
    local host_addr=$(dict_get_val "HOST_ADDR") && HOST_ADDR="$host_addr"
    local host_port=$(dict_get_val "HOST_PORT") && HOST_PORT="$host_port"
    local proxy_addr=$(dict_get_val "PROXY_ADDR") && PROXY_ADDR="$proxy_addr"
    local proxy_port=$(dict_get_val "PROXY_PORT") && PROXY_PORT="$proxy_port"
    local mosh_ports=$(dict_get_val "MOSH_PORTS") && MOSH_PORTS="$mosh_ports"
    local prefer_pem=$(dict_get_val "PREFER_PEM") && PREFER_PEM="$prefer_pem"
    local pem_file=$(dict_get_val "PEM_FILE") && PEM_FILE=$(eval printf '%s' "$pem_file")
    local error_msg=""

    PEM_FILE=$($this.get_pem_file "$PEM_FILE")

    # Validate inputs
    if ! is_valid_ip "$HOST_ADDR"; then
        error_exit "Invalid IP address for host."
    fi

    if ! is_valid_port "$HOST_PORT"; then
        error_exit "Invalid port for host."
    fi

    if [[ -z "$USERNAME" || -z "$HOST_NAME" ]]; then
        error_exit "Username and hostname are required."
    fi

    if [[ "$PREFER_PEM" == "true" ]] && ! is_file "$PEM_FILE"; then
        if [ -n "$PEM_FILE" ]; then
            error_msg="PEM file is required (currently specified as: \"$PEM_FILE\")."
        else
            error_msg="PEM file is required (currently specified as: (empty))."
        fi

        error_exit "$error_msg"
    fi
}

# Prepare ssh command
@def
prep_ssh_command() {
    local set_account=$(trim "$1")
    in_array "$set_account" "true" "false" || set_account="true"
    local use_proxy=$(trim "$2")
    in_array "$use_proxy" "auto" "true" "false" || use_proxy="auto"
    local use_prefix=$(trim "$3")
    in_array "$use_prefix" "true" "false" || use_prefix="true"
    local ssh_command=""

    if [[ "$use_proxy" == "auto" ]]; then
        use_proxy="$USE_PROXY"
    fi

    if [[ "$use_prefix" == "true" ]]; then
        [[ -z "$ssh_command" ]] || ssh_command+=" "
        ssh_command+="ssh -p$HOST_PORT"
    fi

    if [[ "$set_account" == "true" ]]; then
        [[ -z "$ssh_command" ]] || ssh_command+=" "
        ssh_command+="$USERNAME@$HOST_ADDR"
    fi

    # Apply PEM file if preferred
    if [[ "$PREFER_PEM" == "true" ]]; then
        log_msg "Connecting to [$HOST_NAME] via SSH with PEM..." "true"
        [[ -z "$ssh_command" ]] || ssh_command+=" "
        ssh_command+="-i '$PEM_FILE'"
    else
        log_msg "Connecting to [$HOST_NAME] via SSH..." "true"
    fi

    if [[ "$use_proxy" == "true" ]]; then
        local proxy_command="$(printf '%s' "$($this.generate_proxy_param)")"
        [[ -z "$ssh_command" ]] || ssh_command+=" "
        ssh_command+="$proxy_command"
    fi

    printf '%s' "$ssh_command"
}

# Get the PEM file path
@def
get_pem_file() {
    local pem_file="$PEM_FILE"

    if [ -z "$pem_file" ]; then
        printf ''
        return
    fi

    if string_starts_with "$pem_file" "/"; then
        printf '%s' "$pem_file"
        return
    fi

    local pem_file_dirs=("${PEM_FILE_DIRS[@]}")
    for pem_file_dir in "${pem_file_dirs[@]}"; do
        pem_file_dir=$(trim "$pem_file_dir")
        if [ -z "$pem_file_dir" ]; then
            continue
        fi

        if string_ends_with "$pem_file_dir" "/"; then
            pem_file_dir=$(rtrim "$pem_file_dir" "/")
        fi

        if [[ "$pem_file_dir" == "." ]]; then
            pem_file_dir="$(dirname "$(current_file)")/$HOSTS_INFO_DIR"
        fi

        if is_file "$pem_file_dir/$pem_file"; then
            printf '%s' "$pem_file_dir/$pem_file"
            return
        fi
    done
    printf '%s' "$pem_file_dir/$pem_file"
}

# Prepare command for the remote via ssh protocol
@def
ssh_remote_command() {
    local command=$(trim "$1")
    local ssh_command=$($this.prep_ssh_command)
    [[ -n "$command" ]] && ssh_command="$ssh_command bash -c \"$(printf "%s " "$command")\""
    printf '%s' "$ssh_command"
}

# Execute command from the remote via ssh protocol
@def
remote_exec_command() {
    local command=$(trim "$1")
    local ssh_command=$($this.ssh_remote_command "$command")
    exec_command "$ssh_command" "false" || return 1
    return 0
}

# Unified function for SSH and MOSH command execution
@def
ssh_handle() {
    local operation=$(trim "$1")
    operation="${operation:-"connect"}"

    if [[ "$operation" != "connect" && "$operation" != "set-hostname" && "$operation" != "rsync" && "$operation" != "remote-command" ]]; then
        error_exit "Invalid operation."
    fi

    if [[ "$operation" == "set-hostname" && "$HOST_NAME" == *" "* ]]; then
        error_exit "Hostname can not have spaces."
    fi

    # Define necessary variables
    local ssh_command=""
    local conn_str="$USERNAME@$HOST_NAME"
    set_title "$conn_str"

    # Check if MOSH is to be used
    if [[ "$operation" == "connect" && "$USE_MOSH" == "true" ]]; then
        local params="mosh-server new -s -p $MOSH_PORTS -l LANG=en_US.UTF-8"

        # Apply PEM file if preferred
        if [ "$PREFER_PEM" == "true" ]; then
            log_msg "Connecting via MOSH with PEM..."
            params="-i '$PEM_FILE' $params"
        else
            log_msg "Connecting via MOSH..."
        fi

        # Construct SSH command for MOSH connection
        ssh_command="ssh -p$HOST_PORT $($this.generate_proxy_param) $USERNAME@$HOST_ADDR $params"
        # Execute the SSH command
        response=$(exec_command "$ssh_command") ||
            error_exit "Failed to execute SSH command to retrieve MOSH details."

        # Extract MOSH connection details
        mosh_key=$(printf '%s' "$response" | awk '/MOSH CONNECT/{print $4}')
        mosh_server_port=$(printf '%s' "$response" | awk '/MOSH CONNECT/{print $3}')

        if [ -z "$mosh_key" ] || [ -z "$mosh_server_port" ] && [[ "$DEBUG_MODE" == "false" ]]; then
            error_exit "Failed to retrieve MOSH connection details."
        fi

        # Export MOSH key and address
        export MOSH_KEY="$mosh_key"
        mosh_server_addr="$HOST_ADDR"
        if ! (exec_command "mosh-client '$mosh_server_addr' '$mosh_server_port'" "true" "false" &>/dev/null &&
            unset MOSH_KEY &>/dev/null); then
            error_exit "Failed to connect to [$HOST_NAME]."
        fi
    else
        # Set hostname
        if [[ "$operation" == "set-hostname" ]]; then
            local remote_set_hostname="test -f /etc/hostname.backup.default || cp /etc/hostname /etc/hostname.backup.default && hostnamectl set-hostname $HOST_NAME"
            log_msg "Setting the hostname..."
            $this.remote_exec_command "$remote_set_hostname"
        elif [[ "$operation" == "connect" ]]; then
            $this.remote_exec_command
        elif [[ "$operation" == "rsync" ]]; then
            log_msg "Starting rsync..."
            local dest1=$(trim "$2")
            local dest2=$(trim "$3")

            # Validate input parameters
            if [[ -z "$dest1" || -z "$dest2" ]]; then
                error_exit "Both destination parameters (dest1 and dest2) are required."
            fi

            # Validate format: "local:/path" or "remote:/path"
            local valid_regex="^(.+):(.+)$"
            if [[ ! "$dest1" =~ $valid_regex ]]; then
                error_exit "Invalid format for dest1. Please check for its completeness of format: local:/path/to/dest or \$hostname:/path/to/dest"
            fi
            if [[ ! "$dest2" =~ $valid_regex ]]; then
                error_exit "Invalid format for dest2. Please check for its completeness of format: local:/path/to/dest or \$hostname:/path/to/dest"
            fi

            # Extract actual paths
            local dest1_type="${dest1%%:*}"
            local dest1_path="${dest1#*:}"
            local dest2_type="${dest2%%:*}"
            local dest2_path="${dest2#*:}"

            # Build rsync arguments
            local rsync_source
            local rsync_dest

            if [[ "$dest1_type" == "local" && "$dest2_type" != "local" ]]; then
                $this.set_host_info "$dest2_type"
                dest1_path=$(file_real_path "$dest1_path" "true")
                if [[ -z "$dest1_path" ]]; then
                    error_exit "Invalid path of dest1."
                fi
                rsync_source="$dest1_path"
                rsync_dest="$USERNAME@$HOST_ADDR:$dest2_path"
                ssh_command=$($this.prep_ssh_command "false")
                ssh_command="rsync -e \"$ssh_command\" -avpgolrzP \"$rsync_source\" \"$rsync_dest\""
                exec_command "$(printf '%s' "$ssh_command")"
            elif [[ "$dest1_type" != "local" && "$dest2_type" == "local" ]]; then
                $this.set_host_info "$dest1_type"
                dest2_path=$(file_real_path "$dest2_path")
                if [[ -z "$dest2_path" ]]; then
                    error_exit "Invalid path of dest2."
                fi
                rsync_source="$USERNAME@$HOST_ADDR:$dest1_path"
                rsync_dest="$dest2_path"
                ssh_command=$($this.prep_ssh_command "false")
                ssh_command="rsync -e \"$ssh_command\" -avpgolrzP \"$rsync_source\" \"$rsync_dest\""
                exec_command "$(printf '%s' "$ssh_command")"
            else
                error_exit "Invalid destination(s), please check the correcness of the location tag(s)."
            fi
        elif [[ "$operation" == "remote-command" ]]; then
            local remote_command=$(trim "$3")
            if [[ -z "$remote_command" ]]; then
                error_exit "Please input a command for the remote running."
            fi
            $this.remote_exec_command "$remote_command"
        else
            $this.usage
        fi

        log_msg "Done."
    fi
}

# Function to list hosts
@def
list_hosts() {
    local sub_folder parent_dir host_config_dir

    # Validate and process input arguments
    sub_folder=$(trim "$1")
    parent_dir="$HOSTS_INFO_DIR"

    if [ -n "$sub_folder" ]; then
        host_config_dir="$HOSTS_INFO_DIR/$sub_folder"
    else
        host_config_dir="$HOSTS_INFO_DIR"
    fi

    if [ -z "$parent_dir" ]; then
        error_exit "Parent directory must be specified."
        return 1
    fi

    # Ensure parent directory is absolute
    if [ "${parent_dir:0:1}" != "/" ]; then
        parent_dir="$(pwd)/$parent_dir"
    fi

    # Validate that the host config directory exists
    if [ ! -e "$host_config_dir" ] && [ ! -f "$host_config_dir.yml" ]; then
        error_exit "There is no specified host."
        return 1
    fi

    # Function to compute relative path
    relative_path() {
        local target="$1"
        local base="$2"
        local path=$(printf '%s' "$target" | awk -v base="$base" '{print substr($0, length(base) + 2)}')
        printf '%s' $path
    }

    # Display the current directory at the top
    current_dir=$(relative_path "$host_config_dir" "$parent_dir")
    if [[ -n "$current_dir" ]]; then
        printf '%s' " * [$current_dir]"
    fi

    # List subdirectories with [folder] prefix
    find "$host_config_dir" -mindepth 1 -maxdepth 1 -type d 2>/dev/null | while read -r dir; do
        sub_dir=$(relative_path "$dir" "$parent_dir")
        printf '%s' " + [$sub_dir]"
    done

    # List files without extensions in the parent directory
    find "$host_config_dir" -mindepth 1 -maxdepth 1 -type f 2>/dev/null | while read -r file; do
        sub_dir=$(relative_path $(dirname "$file") "$parent_dir")
        file_name=$(basename "$file")
        file_name=$(printf '%s' "$file_name" | awk -F. '{OFS="."; NF--; print $0}')
        string_starts_with "$file_name" "\." && continue
        if [[ -n "$sub_dir" ]]; then
            filename="$sub_dir/$file_name"
        else
            filename="$file_name"
        fi
        printf '%s' " - $filename"
    done
}

# shortcut for creation
@def
create() {
    local host_path=$(trim "$1")
    local host_config_dir="$HOSTS_INFO_DIR"

    if [ -z "$host_path" ]; then
        error_exit "There is no specified host."
    fi

    local host_config_path="$host_config_dir/$host_path"
    host_config_path=$(file_real_path "$host_config_path")

    if [ -z "$host_config_path" ]; then
        error_exit "There is no specified host."
    fi

    host_config_path="$host_config_path.yml"
    if string_ends_with "$host_config_path" ".yml.yml"; then
        host_config_path=$(substr "$host_config_path" 0 -4)
    fi

    if is_file "$host_config_path"; then
        error_exit "Specified host already exists."
    fi

    host_config_dir=$(dirname "$host_config_path")
    mkdir_p "$host_config_dir" || {
        error_exit "Failed to mkdir: \"$host_config_dir\""
    }

    local tmpfile="$(mktemp)" || {
        error_exit "Failed to create temp file."
    }

    saferm "$tmpfile" "/tmp" "when_quit"
    saferm "$tmpfile" "/var" "when_quit"

    cat >"$tmpfile" <<EOF
USE_PROXY: false
USE_MOSH: false
USERNAME: "root"
HOST_ADDR: ""
HOST_PORT: "22"
PROXY_ADDR: "127.0.0.1"
PROXY_PORT: "8080"
MOSH_PORTS: "60000:61000"
PREFER_PEM: false
PEM_FILE: ""
EOF

    local tempfileMd5=$(md5sum "$tmpfile")
    vi "$tmpfile"
    local vi_status=$?

    if [[ "$vi_status" == 0 ]] && [ -s "$tmpfile" ] && [[ "$tempfileMd5" != $(md5sum "$tmpfile") ]]; then
        move_file "$tmpfile" "$host_config_path" "false" && {
            log_msg "Host config file has been saved as: $host_config_path"
        }
    fi
}

#shortcut for vi
@def
edit() {
    local hostname=$(trim "$1")
    local host_config_dir="$HOSTS_INFO_DIR"

    if [ -z "$hostname" ]; then
        error_exit "There is no specified host."
    fi

    local host_config_path="$host_config_dir/$hostname"
    host_config_path=$(file_real_path "$host_config_path")

    if [ -z "$host_config_path" ]; then
        error_exit "There is no specified host."
    fi

    host_config_path="$host_config_path.yml"
    if string_ends_with "$host_config_path" ".yml.yml"; then
        host_config_path=$(substr "$host_config_path" 0 -4)
    fi

    if ! is_file "$host_config_path"; then
        error_exit "There is no specified host."
    fi

    vi "$host_config_path" 2>/dev/null
}

@def
rename() {
    local hostname=$(trim "$1")
    local new_hostname=$(trim "$2")
    local host_config_dir="$HOSTS_INFO_DIR"

    if [ -z "$hostname" ]; then
        error_exit "There is no specified host."
    fi

    local host_config_path="$host_config_dir/$hostname"
    host_config_path=$(file_real_path "$host_config_path")
    if [ -z "$host_config_path" ]; then
        error_exit "There is no specified host."
    fi
    host_config_path="$host_config_path.yml"
    if string_ends_with "$host_config_path" ".yml.yml"; then
        host_config_path=$(substr "$host_config_path" 0 -4)
    fi
    if ! is_file "$host_config_path"; then
        error_exit "There is no specified host."
    fi

    local new_host_config_path="$host_config_dir/$new_hostname"
    new_host_config_path=$(file_real_path "$new_host_config_path")
    if [ -z "$new_host_config_path" ]; then
        error_exit "Invalid hostname or path. Please check the new hostname and path."
    fi
    new_host_config_path="$new_host_config_path.yml"
    if string_ends_with "$new_host_config_path" ".yml.yml"; then
        new_host_config_path=$(substr "$new_host_config_path" 0 -4)
    fi
    if is_file "$new_host_config_path"; then
        error_exit "There is a duplicate host in the path, please check the new hostname and path."
    fi

    move_file "$host_config_path" "$new_host_config_path" || error_exit "Failed to rename the specified host."
    log_msg "The specified host has been renamed as '$new_hostname'"
}

#shortcut for remove
@def
remove() {
    local param1=$(dict_get_val 1)
    local param2=$(dict_get_val 2)
    local option_force=""
    local option_yes=""
    local host_path="$param2"

    get_args
    option_force=$(dict_get_val "f" "force")

    if [[ -n "$option_force" ]]; then
        if [[ "$option_force" == "rm" ]]; then
            param2="$param1"
            param1="rm"
        elif [[ "$option_force" != "$EMPTY_EXPR" ]]; then
            param2="$option_force"
        fi

        option_force="true"
    fi

    in_array "$option_force" "true" "false" || option_force="false"

    host_path="$param2"
    if [[ "$host_path" == "$EMPTY_EXPR" ]]; then
        host_path=""
    fi

    if [ -z "$host_path" ]; then
        error_exit "There is no specified host."
    fi

    local host_config_dir="$HOSTS_INFO_DIR"
    local command=""
    local is_dir="false"

    local host_config_path="$host_config_dir/$host_path"
    host_config_path=$(file_real_path "$host_config_path")

    if [ -z "$host_config_path" ]; then
        error_exit "There is no specified host."
    fi

    if [ -d "$host_config_path" ]; then
        if [[ $(trim $(ls "$host_config_path")) != "" ]] && [[ "$option_force" == "false" ]]; then
            error_exit "The folder is not empty, please use -f if you want to forcefully remove it."
        fi
        is_dir="true"
    else
        host_config_path="$host_config_path.yml"
    fi

    if string_ends_with "$host_config_path" ".yml.yml"; then
        host_config_path=$(substr "$host_config_path" 0 -4)
    fi

    if ! file_exists "$host_config_path"; then
        error_exit "There is no specified host."
    fi

    if [[ "$option_force" == "true" ]] || confirm "Please act this carefully, recheck and press 'y' or 'n' to continue." "n"; then
        saferm "$host_config_path" "$HOSTS_INFO_DIR"
    else
        error_exit "Aborted."
    fi
}

# remove hosts fingerprints
@def
remove_known_host() {
    local param1=$(trim "$1")
    local ip_addr=""
    if is_valid_ip "$param1"; then
        ip_addr="$param1"
    else
        $this.set_host_info "$param1"
        ip_addr="$HOST_ADDR"
        is_valid_ip "$ip_addr" || error_exit "Invalid IP Adress."
    fi

    local known_hosts_file="$KNOWN_HOSTS_FILE"
    is_file "$known_hosts_file" && [ -w "$known_hosts_file" ] || error_exit "Failed to remove the specified fingerprint."
    [[ $(strpos "$(cat "$known_hosts_file")" "$ip_addr") != "false" ]] || error_exit "No fingerprint has been assigned to the specified host."
    remove_matched_lines "$known_hosts_file" "$ip_addr" || error_exit "Failed to remove the specified fingerprint."
    [[ $(strpos "$(cat "$known_hosts_file")" "$ip_addr") == "false" ]] || error_exit "Failed to remove the specified fingerprint."
    log_msg "Successfully removed $ip_addr from $known_hosts_file"
}

# ED25519 key generation
@def
gen_ed25519_key() {
    local key_path=$(trim "$1")
    local comment=$(trim "$2")
    comment=${comment:-"\$(whoami)@\$(hostname)"}
    local password=$(trim "$3")
    local strength=$(trim "$4")
    strength=${strength:-"high"}
    local default_filename="id_ed25519"
    local key_dir=""

    if ! command_exists "ssh-keygen"; then
        error_exit "ssh-keygen command not found."
    fi

    get_file_info "$key_path"
    local filename=$(dict_get_val "FILE_NAME")
    local file_path=$(dict_get_val "FILE_PATH")
    local file_ext=$(dict_get_val "FILE_EXT")
    local file_dir=$(dict_get_val "FILE_DIR")
    local file_exists=$(dict_get_val "FILE_EXISTS")
    local file_is_dir=$(dict_get_val "FILE_IS_DIR")
    local file_is_file=$(dict_get_val "FILE_IS_FILE")
    local file_has_ext=$(dict_get_val "FILE_HAS_EXT")

    if [ -z "$filename" ]; then
        filename="$default_filename"
    fi

    key_path="$file_path"
    key_dir="$file_dir"
    mkdir_p "$key_dir"

    # Map strength levels to bcrypt-KDF key length
    local key_length=256
    case "$strength" in
    low) key_length=64 ;;
    moderate) key_length=128 ;;
    high) key_length=256 ;;
    extreme) key_length=512 ;;
    *)
        error_exit "Invalid encryption strength: $strength; please use them for correction: low/moderate/high/extreme"
        ;;
    esac

    local pem="$key_dir/$filename"
    local pem_pub="$pem.pub"

    local temp_dir="/tmp"
    local datetime=$(date +'%Y-%m-%d')
    temp_dir="$temp_dir/ed25519_$datetime"
    mkdir_p "$temp_dir"
    local temp_pem="$temp_dir/ed25519.pem"
    local temp_pem_pub="$temp_pem.pub"

    local rsa_equivalent=""
    case "$key_length" in
    64)
        rsa_equivalent="1024"
        ;;
    128)
        rsa_equivalent="2048"
        ;;
    256)
        rsa_equivalent="4096"
        ;;
    512)
        rsa_equivalent="8192"
        ;;
    *)
        rsa_equivalent="unknown-"
        return 1
        ;;
    esac

    log_msg "=========== Preview for the key generation ==========="
    log_msg "🔑 Private key file (arg1): $pem"
    log_msg "🔑 Public  key file (arg1): $pem_pub"
    log_msg "📝 ed25519 key comment (arg2): $comment"
    log_msg "🔑 Password (arg3, Phrase) is: '$password' $([ -n "$password" ] &&
        printf '%s' '(Please save it carefully)' || printf '%s' '(none, risky)')"
    log_msg "🔑 ed25519 key length (arg4): ${key_length}bit (RSA Equivalent: ${rsa_equivalent}bit)"

    if ! confirm "🔍️ Please check the info above and confirm for the generation:" "y"; then
        error_exit "Aborted."
    fi

    exec_command "ssh-keygen -t ed25519 -a \"$key_length\" -f \"$temp_pem\" -C \"$comment\" -N \"$password\"" "false" &>/dev/null ||
        error_exit "Failed to generate ssh key."
    exec_command "chmod 600 \"$temp_pem\"" || error_exit "Failed to generate ssh key."
    exec_command "chmod 600 \"$temp_pem_pub\"" || error_exit "Failed to generate ssh key."

    move_file "$temp_pem" "$pem" || error_exit "Failed to generate ssh key."
    move_file "$temp_pem_pub" "$pem_pub" || error_exit "Failed to generate ssh key."
    saferm "$temp_dir" "/tmp" "when_quit"

    log_msg "✅ ed25519 key files were successfully generated."
}

# Reg ssh pubkey remotely
@def
reg_pubkey_remotely() {
    local pubkey_file=$(trim "$1")
    local temp_file="/tmp/authorized_keys_$(uuidv4)"
    is_file "$pubkey_file" || error_exit "Specified pubkey file: $pubkey_file not found."
    touch "$temp_file"
    local pubkey=$(trim "$(cat $pubkey_file)")
    local remote_command="mkdir -p /root/.ssh && chmod 700 /root/.ssh; touch /root/.ssh/authorized_keys; chmod 600 /root/.ssh/authorized_keys && \
        printf '%s' '$pubkey' >>/root/.ssh/authorized_keys && cat /root/.ssh/authorized_keys | uniq | tee $temp_file && mv $temp_file /root/.ssh/authorized_keys"
    $this.remote_exec_command "$remote_command" || error_exit "Failed to reg pubkey: $pubkey_file for [$HOST_NAME]."
    log_msg "Done."
}

# Usage information
@def
usage() {
    log_add "  Usage:   $(current_filename) connect <host_name>"
    log_add "           $(current_filename) set-hostname <host_name>"
    log_add "           $(current_filename) ls [specified_folder]"
    log_add "           $(current_filename) create <specified_host>"
    log_add "           $(current_filename) edit <specified_host>"
    log_add "           $(current_filename) rename <specified_host>"
    log_add "           $(current_filename) rm <specified_host>"
    log_add "           $(current_filename) rm-fp <specified_host|specified_ip>"
    log_add "           $(current_filename) rsync 'local:/path/to/source' '<host_name>:/path/to/destination'"
    log_add "           $(current_filename) rsync '<host_name>:/path/to/source' 'local:/path/to/destination'"
    log_add "           $(current_filename) remote-command <host_name> <remote_command>"
    log_add "           $(current_filename) genkey [specified_file_path] [comment] [password] [strength=low|moderate|*high|extreme]"
    log_add "           $(current_filename) reg-pubkey <host_name> <public_key_file>"
    log_add "           $(current_filename) doc"
    log_add "           $(current_filename) install"

    log_flush
    exit 0
}
@class.end

__initialize() {
    EcsManager.new ecsManager
}

action_default() {
    $ecsManager.usage
}

action_connect() {
    $ecsManager.set_host_info "$2"
    continuous_exec "$ecsManager.ssh_handle connect" 3 -1 5 "ecs-connection"
}

action_set_hostname() {
    $ecsManager.set_host_info "$2"
    $ecsManager.ssh_handle "set-hostname"
}

action_ls() {
    $ecsManager.list_hosts "$2"
}

action_create() {
    set_title "$2"
    $ecsManager.create "$2"
}

action_edit() {
    set_title "$2"
    $ecsManager.edit "$2"
}

action_rename() {
    $ecsManager.rename "$2" "$3"
}

action_rm() {
    $ecsManager.remove
}

action_rm_fp() {
    $ecsManager.remove_known_host "$2"
}

action_rsync() {
    $ecsManager.ssh_handle "rsync" "$2" "$3"
}

action_remote_command() {
    $ecsManager.set_host_info "$2"
    $ecsManager.ssh_handle "remote-command" "$2" "$3"
}

action_genkey() {
    $ecsManager.gen_ed25519_key "$2" "$3" "$4"
}

action_reg_pubkey() {
    $ecsManager.set_host_info "$2"
    $ecsManager.reg_pubkey_remotely "$3"
}

action_force() {
    error_exit "option -f/--force must be used with the action 'install' or 'rm'."
}

action_help() {
    $ecsManager.usage
}

action_usage() {
    $ecsManager.usage
}

action_doc() {
    $ecsManager.usage
}

@end
